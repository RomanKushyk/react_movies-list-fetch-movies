{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesContext.tsx","components/MoviesList/MoviesList.tsx","API/api.ts","components/FindMovie/FindMovie.tsx","components/helpers.ts","App.tsx","index.tsx"],"names":["MovieCard","memo","props","movie","className","src","Poster","alt","Title","Plot","MoviesContext","createContext","query","setQuery","foundMovie","setFoundMovie","storedMovies","setStoredMovies","searchError","setSearchError","MoviesProvider","children","useState","contextValues","Provider","value","MoviesList","useContext","map","imdbID","findMovie","url","fetch","options","then","res","ok","Error","status","statusText","json","FindMovie","resetSearchField","useCallback","handleChangeQuery","event","target","handleSearch","a","loadedMovie","Response","addToList","element","preventDefault","findIndex","item","prevState","onSubmit","htmlFor","type","id","placeholder","onChange","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9290c1a1.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: FC<Props> = memo((props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import {\n  createContext, Dispatch, FC, SetStateAction, useState,\n} from 'react';\n\ninterface MoviesContextInterface {\n  query: string,\n  setQuery: Dispatch<SetStateAction<string>>,\n  foundMovie: Movie | null,\n  setFoundMovie: Dispatch<SetStateAction<Movie | null>>,\n  storedMovies: Movie[],\n  setStoredMovies: Dispatch<SetStateAction<Movie[]>>,\n  searchError: boolean,\n  setSearchError: Dispatch<SetStateAction<boolean>>,\n}\n\nexport const MoviesContext = createContext<MoviesContextInterface>({\n  query: '',\n  setQuery: () => {},\n  foundMovie: null,\n  setFoundMovie: () => {},\n  storedMovies: [],\n  setStoredMovies: () => {},\n  searchError: false,\n  setSearchError: () => {},\n});\n\nexport const MoviesProvider: FC = ({ children }) => {\n  const [query, setQuery] = useState<string>('');\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n  const [storedMovies, setStoredMovies] = useState<Movie[]>([]);\n  const [searchError, setSearchError] = useState<boolean>(false);\n\n  const contextValues = {\n    query,\n    setQuery,\n    foundMovie,\n    setFoundMovie,\n    storedMovies,\n    setStoredMovies,\n    searchError,\n    setSearchError,\n  };\n\n  return (\n    <MoviesContext.Provider value={contextValues}>\n      {children}\n    </MoviesContext.Provider>\n  );\n};\n","import { FC, memo, useContext } from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { MoviesContext } from '../MoviesContext';\n\nexport const MoviesList: FC = memo(() => {\n  const { storedMovies } = useContext(MoviesContext);\n\n  return (\n    <div className=\"movies\">\n      {storedMovies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n});\n","const BASE_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=3dfb3239';\n\nexport const request = (url: string, options?: RequestInit) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const findMovie = (query: string): Promise<Movie> => {\n  return request(`&t=${query}`);\n};\n","import React, {\n  ChangeEvent,\n  FormEvent,\n  memo, useCallback, useContext,\n} from 'react';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { MoviesContext } from '../MoviesContext';\nimport { findMovie } from '../../API/api';\nimport { checkIfStored } from '../helpers';\n\nexport const FindMovie: React.FC = memo(() => {\n  const {\n    query,\n    setQuery,\n    foundMovie,\n    setFoundMovie,\n    searchError,\n    setSearchError,\n    setStoredMovies,\n    storedMovies,\n  } = useContext(MoviesContext);\n\n  const resetSearchField = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  const handleChangeQuery = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n\n      setQuery(value);\n      setSearchError(false);\n    }, [],\n  );\n\n  const handleSearch = useCallback(async () => {\n    if (query) {\n      setSearchError(false);\n      setFoundMovie(null);\n\n      try {\n        const loadedMovie = await findMovie(query);\n\n        if (loadedMovie?.Response === 'False') {\n          setSearchError(true);\n        } else {\n          setFoundMovie(loadedMovie);\n        }\n      } catch (error) {\n        setSearchError(true);\n      }\n    } else {\n      setSearchError(true);\n    }\n  }, [query]);\n\n  const addToList = useCallback((event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    resetSearchField();\n\n    if (foundMovie && checkIfStored(storedMovies, foundMovie)) {\n      setStoredMovies(prevState => ([\n        ...prevState,\n        foundMovie,\n      ]));\n      setFoundMovie(null);\n    }\n  }, [foundMovie, storedMovies]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={addToList}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${searchError && 'is-danger'}`}\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {searchError\n            && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={handleSearch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {!!foundMovie && <MovieCard movie={foundMovie} />}\n      </div>\n    </>\n  );\n});\n","export function checkIfStored(array: Movie[], element: Movie) {\n  const index = array.findIndex(item => item.imdbID === element.imdbID);\n\n  if (index === -1) {\n    return true;\n  }\n\n  return false;\n}\n","import { FC } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { MoviesProvider } from './components/MoviesContext';\n\nexport const App: FC = () => {\n  return (\n    <MoviesProvider>\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie />\n        </div>\n      </div>\n    </MoviesProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}